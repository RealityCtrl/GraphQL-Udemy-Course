
type Query {
    me: User
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments(query: String): [Comment!]!
}
type Mutation {
    createUser(data: CreateUserInput!): User!
    createPost(data: CreatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    updateUser(id: String!, data: UpdateUserInput): User!
    updatePost(id: String!, data: UpdatePostInput): Post!
    updateComment(id: String!, data: UpdateCommentInput): Comment!
    deleteUser(userID: String!): User!
    deletePost(postID: String!): Post!
    deleteComment(commentID: String!): Comment!
}

type Subscription {
    count: Int!
}

input CreateUserInput {
    name: String!
    email: String
    age: Int
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
}

input CreatePostInput {
    title: String!
    body: String
    published: Boolean
    author: String!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
    author: String
}

input CreateCommentInput {
    text: String!
    author: String!
    post: String!
}

input UpdateCommentInput {
    text: String
    author: String
}

type User {
    id: ID!
    name: String!
    email: String
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}
type Post {
    id: ID!
    title: String!
    body: String,
    published: Boolean,
    author: User!
    comments: [Comment!]!
}
type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}
